series-collapse
===============

Added `collapse` keyword argument to `series()` for collapsing an entire
timeseries into a single row. Transforms are performed after the collapse,
allowing easy calculation of aggregates across an entire timeseries.

Fix inconsistency in gauge type when collapsing or condensing gauge data.
Value for an interval is the last recorded gauge value now.

Added support in `get()` and `series()` for joining multiple timeseries
into a single result.

When condensing gauge data, the last non-null value is used, rather than
the last value in the series independent of whether it was set.

0.3.0
=====

Implemented support for Gregorian data intervals `[daily, weekly, monthly, yearly]`

New API for `Timeseries.series()`, with optional arguments `start` and `end`
replacing the old argument `timestamp`. See README for documentation.

0.2.2
=====

Fixed bug in fetching mongo series, which was missing the stat name in the
query.

0.2.1
=====

Added ability to pass in a list of transforms, to support multiple calculations
per row of the data set.

0.2.0
=====

Implemented support for storing data in mongo.

Transforms on histograms will be called with a dictionary object, not a list,
to reduce the time and memory footprint required to run calculations on the
data.

0.1.5
=====

Fixed bug in turning relative interval definitions into integers for
calculations in get() and series().

0.1.4
=====

Added a gauge type

0.1.3
=====

Fixed increment by integer on a Count series.

Turn off transactions in Redis pipelines.


0.1.2
=====

Added simple transforms on all timeseries and ability to apply any function
to a row of data when calling `get` and `series`.

0.1.1
=====

Added ability to specify 'step' and 'resolution' in terms of hours, days,
weeks, months and year.

0.1.0
=====

Beta of kairos for redis, significantly refactors the API. All types of 
timeseries are created with the Timeseries constructor. The arguments to
the constructor have been changed to simplify and clarify their usage. In
particular, a single timeseries implements only a single type (e.g. Histogram)
read and write functions are shared by all intervals in a timeseries, and the
count_only support is now the timeseries type `count`. See README for details.

Added exceptions. Only exception currently implemented is UnknownInterval.


0.0.7
=====

If tracking only counts and resolution=interval, handle an interval without data


0.0.6
=====

Added optional compression on a series which will count unique hits on a
value within an interval. Exact time resolution is traded in favor of
a (possible) significant reduction in storage requirements. The resolution
of the compression is up to the user in how they cast the data on insert.


0.0.5
=====

Added optional prefix for time series keys


0.0.4
=====

Fix problems with Timeseries.series() when count_only or step==resolution


0.0.3
=====

Fix packaging


0.0.2
=====

Added Timeseries.series() for fetching multiple steps at a time

Added Timeseries.count() for fetching the number of values in an interval

Use redis pipelines where possible

Added ability to track only counts rather than raw values

Added concept of resolution within an interval

Switch to OrderedDict for all results


0.0.1
=====

Initial release, supports simple time series of step in seconds, 
max number of steps, casting of results
